      - name: Add PR to Project V2
        id: add
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}  # classic PAT: repo, project
          script: |
            const projectId = process.env.PROJECT_ID?.trim();
            const pr = context.payload.pull_request;
            if (!projectId || !projectId.startsWith("PVT_")) {
              core.setFailed("PROJECT_ID missing/invalid (must start with PVT_)");
              return;
            }
            if (!pr) { core.setFailed("No pull_request payload"); return; }

            // 1) Add the PR to the project
            const addMutation =
              "mutation($projectId:ID!, $contentId:ID!) { addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) { item { id } } }";
            const addRes = await github.graphql(addMutation, { projectId, contentId: pr.node_id });
            const itemId = addRes.addProjectV2ItemById.item.id;
            core.info(`Added PR #${pr.number} as item ${itemId} to ${projectId}`);

            // 2) Fetch ONLY single-select fields via inline fragment (union-safe)
            const fieldsQuery = `
              query($projectId:ID!){
                node(id:$projectId){
                  ... on ProjectV2 {
                    fields(first:50){
                      nodes{
                        __typename
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }`;

            const res = await github.graphql(fieldsQuery, { projectId });
            // Filter to the single-select nodes we actually received
            const fields = res.node.fields.nodes.filter(n => n && n.__typename === "ProjectV2SingleSelectField");

            function pick(fieldName, optionName) {
              const f = fields.find(x => x.name === fieldName);
              if (!f) return null;
              const o = f.options.find(o => o.name === optionName);
              if (!o) return null;
              return { fieldId: f.id, optionId: o.id, label: `${fieldName}=${optionName}` };
            }

            const desired = [
              pick("Priority", "P2 (Normal)"),
              pick("Stage", "Later"),
            ].filter(Boolean);

            const updateMutation = `
              mutation($projectId:ID!,$itemId:ID!,$fieldId:ID!,$optionId:String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,itemId:$itemId,fieldId:$fieldId,
                  value:{ singleSelectOptionId:$optionId }
                }) { clientMutationId }
              }`;

            for (const d of desired) {
              await github.graphql(updateMutation, {
                projectId, itemId, fieldId: d.fieldId, optionId: d.optionId
              });
              core.info(`Set ${d.label}`);
            }

            core.setOutput("itemId", itemId);
