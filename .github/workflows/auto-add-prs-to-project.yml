permissions: {}
name: Auto-add PRs to Project
on:
  pull_request_target:
    types: [opened, reopened, ready_for_review, synchronize]

jobs:
  add:
    if: github.repository_owner == 'greta-47'
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}

    steps:
      - name: Add PR to Project V2 + set fields
        id: add
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const projectId = process.env.PROJECT_ID?.trim();
            const pr = context.payload.pull_request;
            if (!projectId || !projectId.startsWith("PVT_")) { core.setFailed("PROJECT_ID is missing/invalid"); return; }
            if (!pr) { core.setFailed("No pull_request payload"); return; }

            const addMutation = `
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                  item { id }
                }
              }`;
            const addRes = await github.graphql(addMutation, { projectId, contentId: pr.node_id });
            const itemId = addRes.addProjectV2ItemById.item.id;

            const fieldsQuery = `
              query($projectId:ID!) {
                node(id: $projectId) { ... on ProjectV2 {
                  fields(first: 50) { nodes {
                    __typename
                    ... on ProjectV2SingleSelectField { id name options { id name } }
                    ... on ProjectV2FieldCommon { id name }
                  }} } }
                }`;
            const fq = await github.graphql(fieldsQuery, { projectId });
            const nodes = fq?.node?.fields?.nodes ?? [];
            const allFields = nodes.filter(n => n && n.name);
            const selectFields = allFields.filter(n => Array.isArray(n.options));
            const pick = (fieldName, optionName) => {
              const f = selectFields.find(x => x.name === fieldName);
              if (!f) return null;
              const o = f.options.find(o => o.name === optionName);
              if (!o) return null;
              return { fieldId: f.id, optionId: o.id };
            };

            const desired = [pick("Priority", "P2 (Normal)"), pick("Stage", "Later")].filter(Boolean);
            if (desired.length) {
              const updateMutation = `
                mutation($projectId:ID!,$itemId:ID!,$fieldId:ID!,$optionId:String!){
                  updateProjectV2ItemFieldValue(input:{
                    projectId:$projectId, itemId:$itemId, fieldId:$fieldId,
                    value:{ singleSelectOptionId:$optionId }
                  }) { clientMutationId }
                }`;
              for (const d of desired) {
                await github.graphql(updateMutation, { projectId, itemId, fieldId: d.fieldId, optionId: d.optionId });
              }
            }

            core.setOutput("itemId", itemId);

      - name: Comment on PR (confirmation)
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: "âœ… Added this PR to the project and set defaults (Priority: P2, Stage: Later)."
            });
